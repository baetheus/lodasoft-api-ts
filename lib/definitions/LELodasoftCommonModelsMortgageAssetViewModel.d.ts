import { LELodasoftCommonModelsMortgageAddressViewModel } from '../definitions/LELodasoftCommonModelsMortgageAddressViewModel';
import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftCommonModelsMortgageAssetViewModel = {
    assetId: Option<number>;
    borrowerId: Option<number>;
    addressId: Option<number>;
    assetType: Option<'Automobile' | 'Bond' | 'BridgeLoanNotDeposited' | 'Cash' | 'CertificateOfDepositTimeDeposit' | 'CheckingAccount' | 'EarnestMoneyCashDepositTowardPurchase' | 'GiftsTotal' | 'GiftsNotDeposited' | 'LifeInsurance' | 'MoneyMarketFund' | 'MutualFund' | 'NetWorthOfBusinessOwned' | 'OtherLiquidAssets' | 'OtherNonLiquidAssets' | 'PendingNetSaleProceedsFromRealEstateAssets' | 'RelocationMoney' | 'RetirementFund' | 'SaleOtherAssets' | 'SavingsAccount' | 'SecuredBorrowedFundsNotDeposited' | 'Stock' | 'TrustAccount'>;
    cashMarketValue: Option<number>;
    accountNumber: Option<string>;
    depository: Option<string>;
    makeModel: Option<string>;
    year: Option<number>;
    disposition: Option<string>;
    amountOfMortgageLien: Option<number>;
    morgagePayment: Option<number>;
    gross: Option<number>;
    netRentalIncome: Option<number>;
    insMainTaxMisc: Option<number>;
    address: Option<LELodasoftCommonModelsMortgageAddressViewModel>;
    companyId: Option<number>;
    insertedBy: Option<string>;
    dateInserted: Option<Date>;
    updatedBy: Option<string>;
    dateUpdated: Option<Date>;
};
export declare const LELodasoftCommonModelsMortgageAssetViewModelIO: import("io-ts").TypeC<{
    assetId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    assetType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Automobile: null;
        Bond: null;
        BridgeLoanNotDeposited: null;
        Cash: null;
        CertificateOfDepositTimeDeposit: null;
        CheckingAccount: null;
        EarnestMoneyCashDepositTowardPurchase: null;
        GiftsTotal: null;
        GiftsNotDeposited: null;
        LifeInsurance: null;
        MoneyMarketFund: null;
        MutualFund: null;
        NetWorthOfBusinessOwned: null;
        OtherLiquidAssets: null;
        OtherNonLiquidAssets: null;
        PendingNetSaleProceedsFromRealEstateAssets: null;
        RelocationMoney: null;
        RetirementFund: null;
        SaleOtherAssets: null;
        SavingsAccount: null;
        SecuredBorrowedFundsNotDeposited: null;
        Stock: null;
        TrustAccount: null;
    }>>;
    cashMarketValue: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    accountNumber: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    depository: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    makeModel: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    year: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    disposition: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    amountOfMortgageLien: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    morgagePayment: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    gross: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    netRentalIncome: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insMainTaxMisc: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            PresentAddress: null;
            FormerAddress: null;
            MailingAddress: null;
        }>>;
        address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
}>;
