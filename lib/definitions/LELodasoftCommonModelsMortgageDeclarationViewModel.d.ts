import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftCommonModelsMortgageDeclarationViewModel = {
    declarationId: Option<number>;
    borrowerId: Option<number>;
    haveJudgement: Option<boolean>;
    haveJudgementInfo: Option<string>;
    declaredBankruptcy: Option<boolean>;
    declaredBankruptcyInfo: Option<string>;
    beenForclosed: Option<boolean>;
    beenForclosedInfo: Option<string>;
    haveLawsuit: Option<boolean>;
    haveLawsuitInfo: Option<string>;
    haveLoanObligation: Option<boolean>;
    haveLoanObligationInfo: Option<string>;
    haveTaxDebt: Option<boolean>;
    haveTaxDebtInfo: Option<string>;
    haveChildSupport: Option<boolean>;
    haveChildSupportInfo: Option<string>;
    borrowedDownPayment: Option<boolean>;
    borrowedDownPaymentInfo: Option<string>;
    coSignedLoan: Option<boolean>;
    coSignedLoanInfo: Option<string>;
    isVeteran: Option<boolean>;
    residenceStatus: Option<'USCitizen' | 'PermanentResident' | 'ResidentAlien' | 'UnknownResidencyStatus'>;
    occupyProperty: Option<boolean>;
    havePropertiesOwnership: Option<boolean>;
    typeOfProperty: Option<'SFRAttached' | 'Condominium' | 'Cooperative' | 'SFR' | 'HighRiseCondominium' | 'ManufacturedHousing' | 'Modular' | 'PUD' | 'ManufacturedHousingSingleWide' | 'ManufacturedHousingDoubleWide' | 'DetachedCondominium' | 'ManufacturedHomeCondominium' | 'ManufacturedHousingMultiWide' | 'ManufacturedHomeCondominiumOrPUDOrCooperative' | 'TwoTo4UnitBuilding' | 'NonWarrantedCondo'>;
    propertyWillBe: Option<'PrimaryResidence' | 'SecondaryResidence' | 'Investment' | 'ShortTermRental'>;
    heldTitleHow: Option<number>;
    fromCreditReport: Option<boolean>;
    companyId: Option<number>;
    insertedBy: Option<string>;
    dateInserted: Option<Date>;
    updatedBy: Option<string>;
    dateUpdated: Option<Date>;
};
export declare const LELodasoftCommonModelsMortgageDeclarationViewModelIO: import("io-ts").TypeC<{
    declarationId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    haveJudgement: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    haveJudgementInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    declaredBankruptcy: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    declaredBankruptcyInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    beenForclosed: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    beenForclosedInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    haveLawsuit: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    haveLawsuitInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    haveLoanObligation: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    haveLoanObligationInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    haveTaxDebt: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    haveTaxDebtInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    haveChildSupport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    haveChildSupportInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    borrowedDownPayment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    borrowedDownPaymentInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    coSignedLoan: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    coSignedLoanInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    isVeteran: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    residenceStatus: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        USCitizen: null;
        PermanentResident: null;
        ResidentAlien: null;
        UnknownResidencyStatus: null;
    }>>;
    occupyProperty: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    havePropertiesOwnership: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    typeOfProperty: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        SFRAttached: null;
        Condominium: null;
        Cooperative: null;
        SFR: null;
        HighRiseCondominium: null;
        ManufacturedHousing: null;
        Modular: null;
        PUD: null;
        ManufacturedHousingSingleWide: null;
        ManufacturedHousingDoubleWide: null;
        DetachedCondominium: null;
        ManufacturedHomeCondominium: null;
        ManufacturedHousingMultiWide: null;
        ManufacturedHomeCondominiumOrPUDOrCooperative: null;
        TwoTo4UnitBuilding: null;
        NonWarrantedCondo: null;
    }>>;
    propertyWillBe: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        PrimaryResidence: null;
        SecondaryResidence: null;
        Investment: null;
        ShortTermRental: null;
    }>>;
    heldTitleHow: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    fromCreditReport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
}>;
