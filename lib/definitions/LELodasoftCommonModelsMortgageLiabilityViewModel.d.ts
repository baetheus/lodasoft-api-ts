import { LELodasoftCommonModelsMortgageAddressViewModel } from '../definitions/LELodasoftCommonModelsMortgageAddressViewModel';
import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftCommonModelsMortgageLiabilityViewModel = {
    liabilityId: Option<number>;
    borrowerId: Option<number>;
    addressId: Option<number>;
    typeOfLiability: Option<'Alimony' | 'ChildCare' | 'ChildSupport' | 'CollectionsJudgementsAndLiens' | 'HELOC' | 'Installment' | 'JobRelatedExpenses' | 'LeasePayments' | 'MortgageLoan' | 'Open30DayChargeAccount' | 'OtherLiability' | 'Revolving' | 'SeparateMaintenanceExpense' | 'OtherExpense' | 'Taxes'>;
    creditorName: Option<string>;
    accountNumber: Option<string>;
    monthlyPayment: Option<number>;
    monthsLeftToPay: Option<number>;
    unpaidBalance: Option<number>;
    willBePaidOff: Option<boolean>;
    isResubordinate: Option<boolean>;
    isExcluded: Option<boolean>;
    late30Days: Option<number>;
    late60Days: Option<number>;
    late90Days: Option<number>;
    late120Days: Option<number>;
    consumerDisputeIndicator: Option<boolean>;
    derogatoryDataIndicator: Option<boolean>;
    fromCreditReport: Option<boolean>;
    address: Option<LELodasoftCommonModelsMortgageAddressViewModel>;
    companyId: Option<number>;
    insertedBy: Option<string>;
    dateInserted: Option<Date>;
    updatedBy: Option<string>;
    dateUpdated: Option<Date>;
};
export declare const LELodasoftCommonModelsMortgageLiabilityViewModelIO: import("io-ts").TypeC<{
    liabilityId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    typeOfLiability: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Alimony: null;
        ChildCare: null;
        ChildSupport: null;
        CollectionsJudgementsAndLiens: null;
        HELOC: null;
        Installment: null;
        JobRelatedExpenses: null;
        LeasePayments: null;
        MortgageLoan: null;
        Open30DayChargeAccount: null;
        OtherLiability: null;
        Revolving: null;
        SeparateMaintenanceExpense: null;
        OtherExpense: null;
        Taxes: null;
    }>>;
    creditorName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    accountNumber: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    monthlyPayment: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    monthsLeftToPay: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    unpaidBalance: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    willBePaidOff: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    isResubordinate: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    isExcluded: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    late30Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    late60Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    late90Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    late120Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    consumerDisputeIndicator: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    derogatoryDataIndicator: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    fromCreditReport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            PresentAddress: null;
            FormerAddress: null;
            MailingAddress: null;
        }>>;
        address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
}>;
