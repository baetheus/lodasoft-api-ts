import { LELodasoftDataAccessDbModelsAdminStackingOrderModel } from '../definitions/LELodasoftDataAccessDbModelsAdminStackingOrderModel';
import { LELodasoftDataAccessDbModelsConfigurationCompanyModel } from '../definitions/LELodasoftDataAccessDbModelsConfigurationCompanyModel';
import { LELodasoftDataAccessDbModelsConfigurationRoleModel } from '../definitions/LELodasoftDataAccessDbModelsConfigurationRoleModel';
import { MicrosoftAspNetIdentityEntityFrameworkIdentityUserClaim } from '../definitions/MicrosoftAspNetIdentityEntityFrameworkIdentityUserClaim';
import { MicrosoftAspNetIdentityEntityFrameworkIdentityUserLogin } from '../definitions/MicrosoftAspNetIdentityEntityFrameworkIdentityUserLogin';
import { MicrosoftAspNetIdentityEntityFrameworkIdentityUserRole } from '../definitions/MicrosoftAspNetIdentityEntityFrameworkIdentityUserRole';
import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftDataAccessDbModelsUserProfile = {
    companyId: Option<number>;
    companyModel: Option<LELodasoftDataAccessDbModelsConfigurationCompanyModel>;
    stackOrderId: Option<number>;
    stackingOrder: Option<LELodasoftDataAccessDbModelsAdminStackingOrderModel>;
    roleId: Option<number>;
    roleModel: Option<LELodasoftDataAccessDbModelsConfigurationRoleModel>;
    userType: Option<'Admin' | 'Borrower' | 'Agent'>;
    avatarId: Option<string>;
    firstName: Option<string>;
    lastName: Option<string>;
    dob: Option<Date>;
    timeZone: Option<string>;
    title: Option<string>;
    nmls: Option<string>;
    emailSignature: Option<string>;
    smsSignature: Option<string>;
    flagAdmin: Option<boolean>;
    reportTo: Option<string>;
    inviteDate: Option<Date>;
    confirmationDate: Option<Date>;
    confirmationToken: Option<string>;
    cellPhone: Option<string>;
    workPhone: Option<string>;
    homePhone: Option<string>;
    fax: Option<string>;
    mailingStreet: Option<string>;
    mailingPOBox: Option<string>;
    mailingCity: Option<string>;
    mailingState: Option<string>;
    mailingZip: Option<string>;
    active: Option<boolean>;
    currentTimeLogin: Option<Date>;
    lastTimeLogin: Option<Date>;
    releaseNotesVersion: Option<string>;
    userImage: Option<string>;
    userImageData: Option<string>;
    email: Option<string>;
    emailConfirmed: Option<boolean>;
    passwordHash: Option<string>;
    securityStamp: Option<string>;
    phoneNumber: Option<string>;
    phoneNumberConfirmed: Option<boolean>;
    twoFactorEnabled: Option<boolean>;
    lockoutEndDateUtc: Option<Date>;
    lockoutEnabled: Option<boolean>;
    accessFailedCount: Option<number>;
    roles: Option<Array<MicrosoftAspNetIdentityEntityFrameworkIdentityUserRole>>;
    claims: Option<Array<MicrosoftAspNetIdentityEntityFrameworkIdentityUserClaim>>;
    logins: Option<Array<MicrosoftAspNetIdentityEntityFrameworkIdentityUserLogin>>;
    id: Option<string>;
    userName: Option<string>;
};
export declare const LELodasoftDataAccessDbModelsUserProfileIO: import("io-ts").TypeC<{
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    companyModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        companyURL: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        borrowerURL: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        agentURL: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        companyGUID: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        companyName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        address: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        zip: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        logo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        smallLogo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        signatureLogo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        nmls: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        isTemplate: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        docEditingEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        docGenerationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        full1003Enabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        leadManagementEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        onlineApplicationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        digitalAssetVerificationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        digitalEmploymentVerificationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        prequalGenerationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        smsAlertsEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        emailTestsEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        inviteBorrowerCheckedByDefault: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        creditMonitoringEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        creditReportingEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        ausEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        losEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        multipleCredentialSupportEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    }>>;
    stackOrderId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    stackingOrder: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        stakingOrderId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        company: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
            companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            companyURL: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            borrowerURL: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            agentURL: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            companyGUID: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            companyName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            address: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            zip: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            logo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            smallLogo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            signatureLogo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            nmls: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            isTemplate: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            docEditingEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            docGenerationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            full1003Enabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            leadManagementEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            onlineApplicationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            digitalAssetVerificationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            digitalEmploymentVerificationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            prequalGenerationEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            smsAlertsEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            emailTestsEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            inviteBorrowerCheckedByDefault: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            creditMonitoringEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            creditReportingEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            ausEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            losEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            multipleCredentialSupportEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        }>>;
        docType: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        associate: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    }>>;
    roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    roleModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        roleName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        isLoanContact: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        allowAccessAllLoans: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        allowBorrowerAssignment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showOnPortals: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showNewSubmissionForm: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        bulkEditTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        readOnlyTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        useForCreditMonitoring: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    userType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Admin: null;
        Borrower: null;
        Agent: null;
    }>>;
    avatarId: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    firstName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    lastName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dob: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    timeZone: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    title: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    nmls: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    emailSignature: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    smsSignature: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    flagAdmin: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    reportTo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    inviteDate: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    confirmationDate: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    confirmationToken: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    cellPhone: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    workPhone: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    homePhone: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    fax: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    mailingStreet: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    mailingPOBox: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    mailingCity: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    mailingState: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    mailingZip: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    currentTimeLogin: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    lastTimeLogin: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    releaseNotesVersion: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    userImage: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    userImageData: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    email: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    emailConfirmed: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    passwordHash: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    securityStamp: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    phoneNumber: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    phoneNumberConfirmed: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    twoFactorEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    lockoutEndDateUtc: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    lockoutEnabled: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    accessFailedCount: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    roles: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        userId: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    }>>>;
    claims: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        id: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        userId: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        claimType: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        claimValue: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    }>>>;
    logins: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        loginProvider: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        providerKey: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        userId: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    }>>>;
    id: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    userName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
}>;
