import { LELodasoftDataAccessDbModelsConfigurationCharacteristicModel } from '../definitions/LELodasoftDataAccessDbModelsConfigurationCharacteristicModel';
import { LELodasoftDataAccessDbModelsConfigurationDocumentTypeModel } from '../definitions/LELodasoftDataAccessDbModelsConfigurationDocumentTypeModel';
import { LELodasoftDataAccessDbModelsConfigurationLoanStatusModel } from '../definitions/LELodasoftDataAccessDbModelsConfigurationLoanStatusModel';
import { LELodasoftDataAccessDbModelsConfigurationRoleModel } from '../definitions/LELodasoftDataAccessDbModelsConfigurationRoleModel';
import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftDataAccessDbModelsConfigurationCustomTaskModel = {
    customTaskId: Option<number>;
    taskCategoryId: Option<number>;
    taskCategoryModel: Option<LELodasoftDataAccessDbModelsConfigurationCharacteristicModel>;
    loanStatusId: Option<number>;
    loanStatusModel: Option<LELodasoftDataAccessDbModelsConfigurationLoanStatusModel>;
    taskDescription: Option<string>;
    option: Option<'Immediately' | 'OnLoanStatus'>;
    applyTo: Option<'Loan' | 'PrimaryBorrower' | 'SelectBorrowers'>;
    roleId: Option<number>;
    roleModel: Option<LELodasoftDataAccessDbModelsConfigurationRoleModel>;
    documentTypeId: Option<number>;
    documentType: Option<LELodasoftDataAccessDbModelsConfigurationDocumentTypeModel>;
    reviewRequiredRoleId: Option<number>;
    reviewRequiredRoleModel: Option<LELodasoftDataAccessDbModelsConfigurationRoleModel>;
    notifyPartyRoleId: Option<number>;
    notifyPartyRoleModel: Option<LELodasoftDataAccessDbModelsConfigurationRoleModel>;
    taskType: Option<'RequestDocument' | 'ViewDocument' | 'AcknowledgeReceipt' | 'EsignDocument' | 'RequestInformation' | 'PerformAction' | 'OnlineApplication' | 'DigitalAssetVerification'>;
    dueDays: Option<number>;
    permittedAgentTypes: Option<string>;
    tasksOnCompletion: Option<string>;
    documentDataHeader: Option<string>;
    defaultTaskPriority: Option<'Low' | 'Normal' | 'High' | 'Immediate'>;
    docDataString: Option<string>;
    requestBorrower: Option<boolean>;
    alwaysShowPending: Option<boolean>;
    companyId: Option<number>;
    insertedBy: Option<string>;
    dateInserted: Option<Date>;
    updatedBy: Option<string>;
    dateUpdated: Option<Date>;
};
export declare const LELodasoftDataAccessDbModelsConfigurationCustomTaskModelIO: import("io-ts").TypeC<{
    customTaskId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    taskCategoryId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    taskCategoryModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        taskCategoryId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        taskCategoryName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        taskOption: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            AutoApply: null;
            Confirm: null;
            RequestQuantity: null;
        }>>;
        characteristicType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            LoanCharacteristic: null;
            BorrowerCharacteristic: null;
        }>>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    }>>;
    loanStatusId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    loanStatusModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        loanStatusId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        loanStatusName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        selectByRole: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        showAsArchive: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        hideFromCounter: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        isLeadStatus: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        emailFromRoleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        roleModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
            roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            roleName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            isLoanContact: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            allowAccessAllLoans: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            allowBorrowerAssignment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            showOnPortals: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            showNewSubmissionForm: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            bulkEditTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            readOnlyTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            useForCreditMonitoring: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
            updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    taskDescription: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    option: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Immediately: null;
        OnLoanStatus: null;
    }>>;
    applyTo: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Loan: null;
        PrimaryBorrower: null;
        SelectBorrowers: null;
    }>>;
    roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    roleModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        roleName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        isLoanContact: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        allowAccessAllLoans: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        allowBorrowerAssignment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showOnPortals: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showNewSubmissionForm: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        bulkEditTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        readOnlyTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        useForCreditMonitoring: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    documentTypeId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    documentType: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        documentTypeId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        documentTypeName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    }>>;
    reviewRequiredRoleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    reviewRequiredRoleModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        roleName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        isLoanContact: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        allowAccessAllLoans: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        allowBorrowerAssignment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showOnPortals: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showNewSubmissionForm: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        bulkEditTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        readOnlyTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        useForCreditMonitoring: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    notifyPartyRoleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    notifyPartyRoleModel: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        roleId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        roleName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        isLoanContact: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        order: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        allowAccessAllLoans: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        allowBorrowerAssignment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showOnPortals: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        showNewSubmissionForm: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        bulkEditTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        readOnlyTasks: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        useForCreditMonitoring: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    taskType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        RequestDocument: null;
        ViewDocument: null;
        AcknowledgeReceipt: null;
        EsignDocument: null;
        RequestInformation: null;
        PerformAction: null;
        OnlineApplication: null;
        DigitalAssetVerification: null;
    }>>;
    dueDays: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    permittedAgentTypes: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    tasksOnCompletion: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    documentDataHeader: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    defaultTaskPriority: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Low: null;
        Normal: null;
        High: null;
        Immediate: null;
    }>>;
    docDataString: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    requestBorrower: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    alwaysShowPending: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
}>;
