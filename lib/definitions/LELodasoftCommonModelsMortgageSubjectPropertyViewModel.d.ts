import { LELodasoftCommonModelsMortgageAddressViewModel } from '../definitions/LELodasoftCommonModelsMortgageAddressViewModel';
import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftCommonModelsMortgageSubjectPropertyViewModel = {
    subjectPropertyId: Option<number>;
    addressId: Option<number>;
    purposeOfLoan: Option<'Refinance' | 'Purchase' | 'ConstructionOnly' | 'ConstructionToPermanent' | 'OtherLoanPurpose' | 'RefinanceCashOut'>;
    propertyWillBe: Option<'PrimaryResidence' | 'SecondaryResidence' | 'Investment' | 'ShortTermRental'>;
    noOfUnits: Option<number>;
    propertyType: Option<'SFRAttached' | 'Condominium' | 'Cooperative' | 'SFR' | 'HighRiseCondominium' | 'ManufacturedHousing' | 'Modular' | 'PUD' | 'ManufacturedHousingSingleWide' | 'ManufacturedHousingDoubleWide' | 'DetachedCondominium' | 'ManufacturedHomeCondominium' | 'ManufacturedHousingMultiWide' | 'ManufacturedHomeCondominiumOrPUDOrCooperative' | 'TwoTo4UnitBuilding' | 'NonWarrantedCondo'>;
    yearBuilt: Option<number>;
    originalCost: Option<number>;
    amountOutstanding: Option<number>;
    presentValue: Option<number>;
    improvementCost: Option<number>;
    originalCostYear: Option<number>;
    amountExistLiensYear: Option<number>;
    refiPurpose: Option<'Purchase' | 'RefinanceCashOut' | 'RefinanceNoCashOut' | 'StreamlinedRefinance' | 'Construction'>;
    describeImprovement: Option<string>;
    improvementStatus: Option<'Made' | 'ToBeMade'>;
    cost: Option<number>;
    titleNames: Option<string>;
    explain: Option<string>;
    manner: Option<string>;
    estate: Option<'FeeSimple' | 'LeaseHold'>;
    address: Option<LELodasoftCommonModelsMortgageAddressViewModel>;
    companyId: Option<number>;
    insertedBy: Option<string>;
    dateInserted: Option<Date>;
    updatedBy: Option<string>;
    dateUpdated: Option<Date>;
};
export declare const LELodasoftCommonModelsMortgageSubjectPropertyViewModelIO: import("io-ts").TypeC<{
    subjectPropertyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    purposeOfLoan: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Refinance: null;
        Purchase: null;
        ConstructionOnly: null;
        ConstructionToPermanent: null;
        OtherLoanPurpose: null;
        RefinanceCashOut: null;
    }>>;
    propertyWillBe: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        PrimaryResidence: null;
        SecondaryResidence: null;
        Investment: null;
        ShortTermRental: null;
    }>>;
    noOfUnits: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    propertyType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        SFRAttached: null;
        Condominium: null;
        Cooperative: null;
        SFR: null;
        HighRiseCondominium: null;
        ManufacturedHousing: null;
        Modular: null;
        PUD: null;
        ManufacturedHousingSingleWide: null;
        ManufacturedHousingDoubleWide: null;
        DetachedCondominium: null;
        ManufacturedHomeCondominium: null;
        ManufacturedHousingMultiWide: null;
        ManufacturedHomeCondominiumOrPUDOrCooperative: null;
        TwoTo4UnitBuilding: null;
        NonWarrantedCondo: null;
    }>>;
    yearBuilt: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    originalCost: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    amountOutstanding: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    presentValue: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    improvementCost: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    originalCostYear: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    amountExistLiensYear: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    refiPurpose: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Purchase: null;
        RefinanceCashOut: null;
        RefinanceNoCashOut: null;
        StreamlinedRefinance: null;
        Construction: null;
    }>>;
    describeImprovement: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    improvementStatus: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Made: null;
        ToBeMade: null;
    }>>;
    cost: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    titleNames: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    explain: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    manner: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    estate: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        FeeSimple: null;
        LeaseHold: null;
    }>>;
    address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            PresentAddress: null;
            FormerAddress: null;
            MailingAddress: null;
        }>>;
        address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>;
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
}>;
