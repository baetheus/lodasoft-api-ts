import { LELodasoftCommonModelsMortgageAssetViewModel } from '../definitions/LELodasoftCommonModelsMortgageAssetViewModel';
import { LELodasoftCommonModelsMortgageDeclarationViewModel } from '../definitions/LELodasoftCommonModelsMortgageDeclarationViewModel';
import { LELodasoftCommonModelsMortgageDependentViewModel } from '../definitions/LELodasoftCommonModelsMortgageDependentViewModel';
import { LELodasoftCommonModelsMortgageEmailViewModel } from '../definitions/LELodasoftCommonModelsMortgageEmailViewModel';
import { LELodasoftCommonModelsMortgageEmploymentViewModel } from '../definitions/LELodasoftCommonModelsMortgageEmploymentViewModel';
import { LELodasoftCommonModelsMortgageExpenseViewModel } from '../definitions/LELodasoftCommonModelsMortgageExpenseViewModel';
import { LELodasoftCommonModelsMortgageGovernmentMonitorViewModel } from '../definitions/LELodasoftCommonModelsMortgageGovernmentMonitorViewModel';
import { LELodasoftCommonModelsMortgageIncomeViewModel } from '../definitions/LELodasoftCommonModelsMortgageIncomeViewModel';
import { LELodasoftCommonModelsMortgageLiabilityViewModel } from '../definitions/LELodasoftCommonModelsMortgageLiabilityViewModel';
import { LELodasoftCommonModelsMortgagePhoneViewModel } from '../definitions/LELodasoftCommonModelsMortgagePhoneViewModel';
import { LELodasoftCommonModelsMortgageReoViewModel } from '../definitions/LELodasoftCommonModelsMortgageReoViewModel';
import { LELodasoftCommonModelsMortgageResidencyAddressViewModel } from '../definitions/LELodasoftCommonModelsMortgageResidencyAddressViewModel';
import { Option } from 'fp-ts/lib/Option';
export declare type LELodasoftCommonModelsMortgageMortgageBorrowerViewModel = {
    borrowerId: Option<number>;
    mortgageId: number;
    contactId: number;
    firstName: Option<string>;
    middleName: Option<string>;
    lastName: Option<string>;
    nameSuffix: Option<string>;
    yearsOfSchool: Option<number>;
    dependentCount: Option<number>;
    authorizedCreditCheck: Option<boolean>;
    socialSecNum: Option<string>;
    maritalStatus: Option<'Single' | 'Married' | 'Separated'>;
    dateOfBirth: Option<Date>;
    creditScore: Option<number>;
    creditScore_Equifax: Option<number>;
    creditScore_Experian: Option<number>;
    creditScore_TransUnion: Option<number>;
    typeOfBorrower: 'PrimaryBorrower' | 'CoBorrower';
    active: Option<boolean>;
    assets: Option<Array<LELodasoftCommonModelsMortgageAssetViewModel>>;
    declarations: Option<Array<LELodasoftCommonModelsMortgageDeclarationViewModel>>;
    dependents: Option<Array<LELodasoftCommonModelsMortgageDependentViewModel>>;
    emails: Option<Array<LELodasoftCommonModelsMortgageEmailViewModel>>;
    employments: Option<Array<LELodasoftCommonModelsMortgageEmploymentViewModel>>;
    expenses: Option<Array<LELodasoftCommonModelsMortgageExpenseViewModel>>;
    governmentMonitors: Option<Array<LELodasoftCommonModelsMortgageGovernmentMonitorViewModel>>;
    incomes: Option<Array<LELodasoftCommonModelsMortgageIncomeViewModel>>;
    liabilities: Option<Array<LELodasoftCommonModelsMortgageLiabilityViewModel>>;
    phones: Option<Array<LELodasoftCommonModelsMortgagePhoneViewModel>>;
    reos: Option<Array<LELodasoftCommonModelsMortgageReoViewModel>>;
    residencyAddresses: Option<Array<LELodasoftCommonModelsMortgageResidencyAddressViewModel>>;
    companyId: Option<number>;
    insertedBy: Option<string>;
    dateInserted: Option<Date>;
    updatedBy: Option<string>;
    dateUpdated: Option<Date>;
};
export declare const LELodasoftCommonModelsMortgageMortgageBorrowerViewModelIO: import("io-ts").TypeC<{
    borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    mortgageId: import("io-ts").NumberC;
    contactId: import("io-ts").NumberC;
    firstName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    middleName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    lastName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    nameSuffix: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    yearsOfSchool: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    dependentCount: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    authorizedCreditCheck: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    socialSecNum: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    maritalStatus: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
        Single: null;
        Married: null;
        Separated: null;
    }>>;
    dateOfBirth: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    creditScore: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    creditScore_Equifax: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    creditScore_Experian: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    creditScore_TransUnion: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    typeOfBorrower: import("io-ts").KeyofC<{
        PrimaryBorrower: null;
        CoBorrower: null;
    }>;
    active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
    assets: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        assetId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        assetType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            Automobile: null;
            Bond: null;
            BridgeLoanNotDeposited: null;
            Cash: null;
            CertificateOfDepositTimeDeposit: null;
            CheckingAccount: null;
            EarnestMoneyCashDepositTowardPurchase: null;
            GiftsTotal: null;
            GiftsNotDeposited: null;
            LifeInsurance: null;
            MoneyMarketFund: null;
            MutualFund: null;
            NetWorthOfBusinessOwned: null;
            OtherLiquidAssets: null;
            OtherNonLiquidAssets: null;
            PendingNetSaleProceedsFromRealEstateAssets: null;
            RelocationMoney: null;
            RetirementFund: null;
            SaleOtherAssets: null;
            SavingsAccount: null;
            SecuredBorrowedFundsNotDeposited: null;
            Stock: null;
            TrustAccount: null;
        }>>;
        cashMarketValue: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        accountNumber: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        depository: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        makeModel: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        year: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        disposition: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        amountOfMortgageLien: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        morgagePayment: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        gross: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        netRentalIncome: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insMainTaxMisc: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
            addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
                PresentAddress: null;
                FormerAddress: null;
                MailingAddress: null;
            }>>;
            address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
            updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    declarations: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        declarationId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        haveJudgement: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        haveJudgementInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        declaredBankruptcy: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        declaredBankruptcyInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        beenForclosed: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        beenForclosedInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        haveLawsuit: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        haveLawsuitInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        haveLoanObligation: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        haveLoanObligationInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        haveTaxDebt: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        haveTaxDebtInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        haveChildSupport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        haveChildSupportInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        borrowedDownPayment: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        borrowedDownPaymentInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        coSignedLoan: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        coSignedLoanInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        isVeteran: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        residenceStatus: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            USCitizen: null;
            PermanentResident: null;
            ResidentAlien: null;
            UnknownResidencyStatus: null;
        }>>;
        occupyProperty: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        havePropertiesOwnership: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        typeOfProperty: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            SFRAttached: null;
            Condominium: null;
            Cooperative: null;
            SFR: null;
            HighRiseCondominium: null;
            ManufacturedHousing: null;
            Modular: null;
            PUD: null;
            ManufacturedHousingSingleWide: null;
            ManufacturedHousingDoubleWide: null;
            DetachedCondominium: null;
            ManufacturedHomeCondominium: null;
            ManufacturedHousingMultiWide: null;
            ManufacturedHomeCondominiumOrPUDOrCooperative: null;
            TwoTo4UnitBuilding: null;
            NonWarrantedCondo: null;
        }>>;
        propertyWillBe: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            PrimaryResidence: null;
            SecondaryResidence: null;
            Investment: null;
            ShortTermRental: null;
        }>>;
        heldTitleHow: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        fromCreditReport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    dependents: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        dependentId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        age: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    emails: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        emailId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        emailAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        typeOfEmail: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            PrimaryEmail: null;
            AdditionalEmail: null;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    employments: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<any>>;
    expenses: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        expenseId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        monthlyAmount: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        expenseType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            FirstMortgagePrincipalAndInterest: null;
            HazardInsurance: null;
            HomeownersInsurance: null;
            HomeownersAssociationDuesAndCondominiumFees: null;
            MorgageInsurance: null;
            OtherHousingExpense: null;
            OtherMortgageLoanPrincipalAndInterest: null;
            RealEstateTax: null;
            Rent: null;
        }>>;
        isCurrent: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    governmentMonitors: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        governmentMonitorId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        isFurnishInfo: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        ethnicity: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            AmericanIndianOrAlaskaNative: null;
            Asian: null;
            BlackOrAfricanAmerican: null;
            HispanicOrLatino: null;
            NativeHawaiianOrOtherPacificIslander: null;
            White: null;
            InformationNotProvided: null;
            NotApplicable: null;
        }>>;
        race: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            Caucasian: null;
            NonCaucasian: null;
            AmericanIndianOrAlaskaNative: null;
            Asian: null;
            BlackOrAfricanAmerican: null;
            NativeHawaiianOrOtherPacificIslander: null;
            White: null;
            InformationNotProvided: null;
            NotApplicable: null;
        }>>;
        sex: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            Female: null;
            Male: null;
            InformationNotProvided: null;
            NotApplicable: null;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    incomes: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<any>>;
    liabilities: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        liabilityId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        typeOfLiability: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            Alimony: null;
            ChildCare: null;
            ChildSupport: null;
            CollectionsJudgementsAndLiens: null;
            HELOC: null;
            Installment: null;
            JobRelatedExpenses: null;
            LeasePayments: null;
            MortgageLoan: null;
            Open30DayChargeAccount: null;
            OtherLiability: null;
            Revolving: null;
            SeparateMaintenanceExpense: null;
            OtherExpense: null;
            Taxes: null;
        }>>;
        creditorName: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        accountNumber: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        monthlyPayment: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        monthsLeftToPay: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        unpaidBalance: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        willBePaidOff: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        isResubordinate: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        isExcluded: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        late30Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        late60Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        late90Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        late120Days: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        consumerDisputeIndicator: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        derogatoryDataIndicator: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        fromCreditReport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
            addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
                PresentAddress: null;
                FormerAddress: null;
                MailingAddress: null;
            }>>;
            address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
            updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    phones: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        phoneId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        phoneNumber: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        typeOfPhone: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            HomePhone: null;
            WorkPhone: null;
            CellPhone: null;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    reos: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        reoId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        typeOfProperty: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            SingleFamily: null;
            Condo: null;
            Townhouse: null;
            Coop: null;
            TwoToFourUnitProperty: null;
            MultifamilyMoreThanFourUnits: null;
            CommercialNonResidential: null;
            MixedUseResidential: null;
            Farm: null;
            HomeAndBusinessCombined: null;
            Land: null;
        }>>;
        dispositionStatus: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            Sold: null;
            PendingSale: null;
            RetainForPrimaryOrSecondaryResidence: null;
            RentalProperty: null;
        }>>;
        marketValue: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        amountOfMortgage: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        grossRentalIncome: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        netRentalIncome: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        mortgagePayment: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        monthlyMiscExpenses: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        isCurrentResidence: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        isSubjectProperty: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
            addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
                PresentAddress: null;
                FormerAddress: null;
                MailingAddress: null;
            }>>;
            address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
            updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    residencyAddresses: import("io-ts-types").OptionFromNullableC<import("io-ts").ArrayC<import("io-ts").TypeC<{
        residencyAddressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        borrowerId: import("io-ts").NumberC;
        addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        residencyBasis: import("io-ts").KeyofC<{
            PresentAddress: null;
            FormerAddress: null;
            MailingAddress: null;
        }>;
        durationYears: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        durationMonths: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        ownRentType: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
            Own: null;
            Rent: null;
            LivingRentFree: null;
        }>>;
        fromCreditReport: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
        address: import("io-ts-types").OptionFromNullableC<import("io-ts").TypeC<{
            addressId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            typeOfAddress: import("io-ts-types").OptionFromNullableC<import("io-ts").KeyofC<{
                PresentAddress: null;
                FormerAddress: null;
                MailingAddress: null;
            }>>;
            address1: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            city: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            state: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            zipCode: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            country: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            active: import("io-ts-types").OptionFromNullableC<import("io-ts").BooleanC>;
            companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
            insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
            updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
            dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        }>>;
        companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
        insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
        updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
        dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    }>>>;
    companyId: import("io-ts-types").OptionFromNullableC<import("io-ts").NumberC>;
    insertedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateInserted: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
    updatedBy: import("io-ts-types").OptionFromNullableC<import("io-ts").StringC>;
    dateUpdated: import("io-ts-types").OptionFromNullableC<import("io-ts-types").DateFromISOStringC>;
}>;
